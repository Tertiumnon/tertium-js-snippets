{
    "Array.from": {
        "body": [
            "Array.from($1)"
        ],
        "description": "The Array.from() method creates a new, shallow-copied Array instance from an array-like or iterable object.",
        "prefix": "arrfr"
    },
    "Array.isArray": {
        "body": [
            "Array.isArray($1)"
        ],
        "description": "The Array.isArray() method determines whether the passed value is an Array.",
        "prefix": "arrisa"
    },
    "Array.of": {
        "body": [
            "Array.of($1)"
        ],
        "description": "The Array.of() method creates a new Array instance with a variable number of arguments.",
        "prefix": "arrof"
    },
    "Array.prototype.at": {
        "body": [
            ".at($1)"
        ],
        "description": "The at() method takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.",
        "prefix": ".at"
    },
    "Array.prototype.concat": {
        "body": [
            ".concat($1)"
        ],
        "description": "The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.",
        "prefix": ".co"
    },
    "Array.prototype.copyWithin": {
        "body": [
            ".copyWithin($1)"
        ],
        "description": "The copyWithin() method shallow copies part of an array to another location in the same array and returns it without modifying its length.",
        "prefix": ".cow"
    },
    "Array.prototype.entries": {
        "body": [
            ".entries($1)"
        ],
        "description": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
        "prefix": ".en"
    },
    "Array.prototype.every": {
        "body": [
            ".every($1)"
        ],
        "description": "The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.",
        "prefix": ".ev"
    },
    "Array.prototype.fill": {
        "body": [
            ".fill($1)"
        ],
        "description": "The fill() method changes all elements in an array to a static value, from a start index (default 0) to an end index (default array.length). It returns the modified array.",
        "prefix": ".fi"
    },
    "Array.prototype.filter": {
        "body": [
            ".filter($1)"
        ],
        "description": "The filter() method creates a new array with all elements that pass the test implemented by the provided function.",
        "prefix": ".fi"
    },
    "Array.prototype.find": {
        "body": [
            ".find($1)"
        ],
        "description": "The find() method returns the value of the first element in the provided array that satisfies the provided testing function.",
        "prefix": ".fi"
    },
    "Array.prototype.findIndex": {
        "body": [
            ".findIndex($1 => $1)"
        ],
        "description": "The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.",
        "prefix": ".fii"
    },
    "Array.prototype.findLast": {
        "body": [
            ".findLast($1)"
        ],
        "description": "Returns the value of the last element in the array that satisfies the provided testing function.",
        "prefix": ".fil"
    },
    "Array.prototype.findLastIndex": {
        "body": [
            ".findLastIndex($1)"
        ],
        "description": "Returns the index of the last element in the array that satisfies the provided testing function.",
        "prefix": ".fili"
    },
    "Array.prototype.flat": {
        "body": [
            ".flat($1)"
        ],
        "description": "Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
        "prefix": ".fl"
    },
    "Array.prototype.flatMap": {
        "body": [
            ".flatMap($1)"
        ],
        "description": "Maps each element using a mapping function, then flattens the result into a new array.",
        "prefix": ".flm"
    },
    "Array.prototype.forEach": {
        "body": [
            ".forEach($1)"
        ],
        "description": "The forEach() method executes a provided function once for each array element.",
        "prefix": ".foe"
    },
    "Array.prototype.includes": {
        "body": [
            ".includes($1)"
        ],
        "description": "The includes() method determines whether an array includes a certain value among its entries, returning true or false as appropriate.",
        "prefix": ".in"
    },
    "Array.prototype.indexOf": {
        "body": [
            ".indexOf($1)"
        ],
        "description": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.",
        "prefix": ".ino"
    },
    "Array.prototype.join": {
        "body": [
            ".join($1)"
        ],
        "description": "The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.",
        "prefix": ".jo"
    },
    "Array.prototype.keys": {
        "body": [
            ".keys($1)"
        ],
        "description": "The keys() method returns a new Array Iterator object that contains the keys for each index in the array.",
        "prefix": ".ke"
    },
    "Array.prototype.lastIndexOf": {
        "body": [
            ".lastIndexOf($1)"
        ],
        "description": "The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.",
        "prefix": ".laio"
    },
    "Array.prototype.map": {
        "body": [
            ".map($1)"
        ],
        "description": "The map() method creates a new array with the results of calling a provided function on every element in the calling array.",
        "prefix": ".ma"
    },
    "Array.prototype.pop": {
        "body": [
            ".pop()"
        ],
        "description": "The pop() method removes the last element from an array and returns that element. This method changes the length of the array.",
        "prefix": ".po"
    },
    "Array.prototype.push": {
        "body": [
            ".push($1)"
        ],
        "description": "The push() method adds zero or more elements to the end of an array and returns the new length of the array.",
        "prefix": ".pu"
    },
    "Array.prototype.reduce": {
        "body": [
            ".reduce($1)"
        ],
        "description": "The reduce() method executes a reducer function on each element of the array.",
        "prefix": ".re"
    },
    "Array.prototype.reduceRight": {
        "body": [
            ".reduceRight($1)"
        ],
        "description": "The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left).",
        "prefix": ".rer"
    },
    "Array.prototype.reverse": {
        "body": [
            ".reverse()"
        ],
        "description": "The reverse() method reverses an array in place.",
        "prefix": ".re"
    },
    "Array.prototype.shift": {
        "body": [
            ".shift()"
        ],
        "description": "The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.",
        "prefix": ".sh"
    },
    "Array.prototype.slice": {
        "body": [
            ".slice()"
        ],
        "description": "The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.",
        "prefix": ".sl"
    },
    "Array.prototype.some": {
        "body": [
            ".some($1)"
        ],
        "description": "The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.",
        "prefix": ".so"
    },
    "Array.prototype.sort": {
        "body": [
            ".sort($1)"
        ],
        "description": "The sort() method sorts the elements of an array in place and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.",
        "prefix": ".so"
    },
    "Array.prototype.sort full function": {
        "body": [
            "(a, b) => {",
            "\tif ($1) {",
            "\t\treturn -1",
            "\t}",
            "\tif () {",
            "\t\treturn 1",
            "\t}",
            "\treturn 0",
            "}"
        ],
        "description": "The sort() method sorts the elements of an array in place and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.",
        "prefix": ".sorf"
    },
    "Array.prototype.sort min function": {
        "body": [
            "(a, b) => a - b"
        ],
        "description": "The sort() method sorts the elements of an array in place and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.",
        "prefix": ".sorm"
    },
    "Array.prototype.splice": {
        "body": [
            ".splice($1)"
        ],
        "description": "The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.",
        "prefix": ".sp"
    },
    "Array.prototype.toLocaleString": {
        "body": [
            ".toLocaleString($1)"
        ],
        "description": "The toLocaleString() method returns a string representing the elements of the array.",
        "prefix": ".tols"
    },
    "Array.prototype.toReversed": {
        "body": [
            ".toReversed()"
        ],
        "description": "The toReversed() method of Array instances returns a new array with the elements in reversed order. This method does not modify the original array.",
        "prefix": ".tor"
    },
    "Array.prototype.toSorted": {
        "body": [
            ".toSorted($1)"
        ],
        "description": "The toSorted() method of Array instances returns a new array with the elements sorted. This method does not modify the original array.",
        "prefix": ".tos"
    },
    "Array.prototype.toSpliced": {
        "body": [
            ".toSpliced($1)"
        ],
        "description": "The toSpliced() method of Array instances returns a new array with some elements removed and/or replaced at a given index. This method does not modify the original array.",
        "prefix": ".tos"
    },
    "Array.prototype.toString": {
        "body": [
            ".toString($1)"
        ],
        "description": "The toString() method returns a string representing the specified array and its elements.",
        "prefix": ".tos"
    },
    "Array.prototype.unshift": {
        "body": [
            ".unshift($1)"
        ],
        "description": "The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.",
        "prefix": ".un"
    },
    "Array.prototype.values": {
        "body": [
            ".values($1)"
        ],
        "description": "The values() method returns a new Array Iterator object that contains the values for each index in the array.",
        "prefix": ".va"
    },
    "Array.prototype.with": {
        "body": [
            ".with($1, )"
        ],
        "description": "The with() method of Array instances is a copying method that returns a new array with a changed element at a given index.",
        "prefix": ".wi"
    },
    "Console.assert": {
        "body": [
            "console.assert($1, '$2')"
        ],
        "description": "Writes an error message to the console if the assertion is false.",
        "prefix": "conas"
    },
    "Console.clear": {
        "body": [
            "console.clear()"
        ],
        "description": "Clears the console.",
        "prefix": "concl"
    },
    "Console.count": {
        "body": [
            "console.count($1)"
        ],
        "description": "Logs the number of times that this particular call to count() has been called.",
        "prefix": "conco"
    },
    "Console.countReset": {
        "body": [
            "console.countReset($1)"
        ],
        "description": "Resets the count for the specified label.",
        "prefix": "concor"
    },
    "Console.debug": {
        "body": [
            "console.debug($1)"
        ],
        "description": "Outputs a debug message to the Web Console.",
        "prefix": "conde"
    },
    "Console.dir": {
        "body": [
            "console.dir($1)"
        ],
        "description": "Displays an interactive list of the properties of the specified JavaScript object.",
        "prefix": "condi"
    },
    "Console.error": {
        "body": [
            "console.error($1)"
        ],
        "description": "Outputs an error message to the Web Console.",
        "prefix": "coner"
    },
    "Console.group": {
        "body": [
            "console.group($1)"
        ],
        "description": "Creates a new inline group in the console.",
        "prefix": "congr"
    },
    "Console.groupCollapsed": {
        "body": [
            "console.groupCollapsed($1)"
        ],
        "description": "Creates a new inline group in the console, but collapsed by default.",
        "prefix": "congrc"
    },
    "Console.groupEnd": {
        "body": [
            "console.groupEnd()"
        ],
        "description": "Exits the current inline group in the console.",
        "prefix": "congre"
    },
    "Console.info": {
        "body": [
            "console.info($1)"
        ],
        "description": "Outputs an informational message to the Web Console.",
        "prefix": "conin"
    },
    "Console.log": {
        "body": [
            "console.log($1)"
        ],
        "description": "Outputs a message to the Web Console.",
        "prefix": "conlo"
    },
    "Console.table": {
        "body": [
            "console.table($1)"
        ],
        "description": "Displays tabular data as a table in the console.",
        "prefix": "conta"
    },
    "Console.time": {
        "body": [
            "console.time($1)"
        ],
        "description": "Starts a timer you can use to track how long an operation takes.",
        "prefix": "conti"
    },
    "Console.timeEnd": {
        "body": [
            "console.timeEnd($1)"
        ],
        "description": "Stops a timer that was previously started by console.time().",
        "prefix": "contie"
    },
    "Console.timeLog": {
        "body": [
            "console.timeLog($1)"
        ],
        "description": "Logs the current value of a timer that was previously started by console.time().",
        "prefix": "contil"
    },
    "Console.trace": {
        "body": [
            "console.trace($1)"
        ],
        "description": "Outputs a stack trace to the Web Console.",
        "prefix": "contr"
    },
    "Console.warn": {
        "body": [
            "console.warn($1)"
        ],
        "description": "Outputs a warning message to the Web Console.",
        "prefix": "conwa"
    },
    "debugger": {
        "body": [
            "debugger"
        ],
        "description": "The debugger statement invokes any available debugging functionality, such as setting a breakpoint.",
        "prefix": "de"
    },
    "Document.createElement": {
        "body": [
            ".createElement($1)"
        ],
        "description": "In an HTML document, the document.createElement() method creates the HTML element specified by tagName, or an HTMLUnknownElement if tagName isn't recognized.",
        "prefix": ".cre"
    },
    "Element.add": {
        "body": [
            ".add($1)"
        ],
        "description": "Adds the specified class values. If these classes already exist in the element's class attribute they are ignored.",
        "prefix": ".ad"
    },
    "Element.classList": {
        "body": [
            ".classList"
        ],
        "description": "The Element.classList is a read-only property that returns a live DOMTokenList collection of the class attributes of the element.",
        "prefix": ".cll"
    },
    "Element.classList.contains": {
        "body": [
            ".contains($1)"
        ],
        "description": "Checks if the specified class value exists in the element's class attribute.",
        "prefix": ".co"
    },
    "Element.classList.remove": {
        "body": [
            ".remove($1)"
        ],
        "description": "Removes the specified class values.",
        "prefix": ".re"
    },
    "Element.classList.replace": {
        "body": [
            ".replace($1, )"
        ],
        "description": "Replaces an existing class with a new class.",
        "prefix": ".re"
    },
    "Element.classList.toggle": {
        "body": [
            ".toggle($1)"
        ],
        "description": "When only one argument is present: Toggle the class value; i.e., if the class exists then remove it and return false, if not, then add it and return true.",
        "prefix": ".to"
    },
    "Element.getAttribute": {
        "body": [
            ".getAttribute($1)"
        ],
        "description": "Returns the value of a specified attribute on the element.",
        "prefix": ".gea"
    },
    "Element.getElementById": {
        "body": [
            ".getElementById($1)"
        ],
        "description": "Returns the element that has the ID attribute with the specified value.",
        "prefix": ".geebi"
    },
    "Element.getElementsByClassName": {
        "body": [
            ".getElementsByClassName($1)"
        ],
        "description": "Returns a live HTMLCollection of elements with the given class name.",
        "prefix": ".geebcn"
    },
    "Element.getElementsByTagName": {
        "body": [
            ".getElementsByTagName($1)"
        ],
        "description": "Returns a live HTMLCollection of elements with the given tag name.",
        "prefix": ".geebtn"
    },
    "Element.removeAttribute": {
        "body": [
            ".removeAttribute($1)"
        ],
        "description": "Removes the attribute with the specified name from the element.",
        "prefix": ".rea"
    },
    "Element.setAttribute": {
        "body": [
            ".setAttribute($1, )"
        ],
        "description": "Sets the value of an attribute on the specified element.",
        "prefix": ".sea"
    },
    "EventTarget.addEventListener": {
        "body": [
            ".addEventListener($1, )"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": ".adel"
    },
    "EventTarget.addEventListener.blur": {
        "body": [
            ".addEventListener($1, 'blur')"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "adelbl"
    },
    "EventTarget.addEventListener.change": {
        "body": [
            ".addEventListener($1, 'change')"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "adelch"
    },
    "EventTarget.addEventListener.click": {
        "body": [
            ".addEventListener($1, 'click')"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "adelcl"
    },
    "EventTarget.addEventListener.focus": {
        "body": [
            ".addEventListener($1, 'focus')"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "adelfo"
    },
    "EventTarget.addEventListener.focusout": {
        "body": [
            ".addEventListener($1, 'focusout')"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "adelfo"
    },
    "EventTarget.addEventListener.input": {
        "body": [
            ".addEventListener($1, 'input')"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "adelin"
    },
    "EventTarget.addEventListener.keydown": {
        "body": [
            ".addEventListener($1, 'keydown')"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "adelke"
    },
    "EventTarget.addEventListener.mouseout": {
        "body": [
            ".addEventListener($1, 'mouseout')"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "adelmo"
    },
    "EventTarget.addEventListener.mouseover": {
        "body": [
            ".addEventListener($1, 'mouseover')"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "adelmo"
    },
    "EventTarget.dispatchEvent": {
        "body": [
            ".dispatchEvent($1)"
        ],
        "description": "Dispatches an Event at the specified EventTarget, (synchronously) invoking the affected EventListeners in the appropriate order.",
        "prefix": ".die"
    },
    "EventTarget.removeEventListener": {
        "body": [
            ".removeEventListener($1, )"
        ],
        "description": "Removes an event listener from the element.",
        "prefix": ".reel"
    },
    "Function.anonymous": {
        "body": [
            "function() {",
            "\t$1",
            "}"
        ],
        "description": "An anonymous function is a function without a function name.",
        "prefix": "fu"
    },
    "Function.arrow": {
        "body": [
            "($1) => {",
            "\t",
            "}"
        ],
        "description": "An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords.",
        "prefix": "fnar"
    },
    "Function.arrowMin": {
        "body": [
            "($1) => $1"
        ],
        "description": "An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords.",
        "prefix": "fnarm"
    },
    "Function.named": {
        "body": [
            "function $1() {",
            "\t",
            "}"
        ],
        "description": "A function is a code snippet that can be called by other code or by itself, or a variable that refers to the function.",
        "prefix": "fun"
    },
    "Function.debounce": {
        "body": [
            "function debounce(fn, delay) {",
            "  let timeoutId;",
            "  return function(...args) {",
            "    clearTimeout(timeoutId);",
            "    timeoutId = setTimeout(() => fn.apply(this, args), delay);",
            "  };",
            "}"
        ],
        "description": "Creates a debounced function that delays invoking fn until after delay ms have elapsed.",
        "prefix": "fu"
    },
    "Function.iife": {
        "body": [
            "(function() {",
            "\t$1",
            "})()"
        ],
        "description": "An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.",
        "prefix": "iife"
    },
    "Function.prototype": {
        "body": [
            ".prototype"
        ],
        "description": "The Function.prototype property represents the Function prototype object.",
        "prefix": ".pro"
    },
    "Function.prototype.apply": {
        "body": [
            ".apply($1)"
        ],
        "description": "The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).",
        "prefix": ".app"
    },
    "Function.prototype.bind": {
        "body": [
            ".bind($1)"
        ],
        "description": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
        "prefix": ".bin"
    },
    "Function.prototype.call": {
        "body": [
            ".call($1)"
        ],
        "description": "The call() method calls a function with a given this value and arguments provided individually.",
        "prefix": ".cal"
    },
    "JSON.parse": {
        "body": [
            "JSON.parse($1)"
        ],
        "description": "Parses a JSON string.",
        "prefix": "jsopa"
    },
    "JSON.stringify": {
        "body": [
            "JSON.stringify($1)"
        ],
        "description": "Converts a value to a JSON string.",
        "prefix": "jsost"
    },
    "Keyword.class": {
        "body": [
            "class $1 {",
            "\tconstructor($2) {}",
            "}"
        ],
        "description": "The class declaration creates a new class with a given name using prototype-based inheritance.",
        "prefix": "cl"
    },
    "Keyword.default": {
        "body": [
            "default"
        ],
        "description": "Keyword",
        "prefix": "de"
    },
    "Keyword.document": {
        "body": [
            "document"
        ],
        "description": "document",
        "prefix": "doc"
    },
    "Keyword.export": {
        "body": [
            "export"
        ],
        "description": "The export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the import statement. The value of an imported binding is subject to change in the module that exports it. When a module updates the value of a binding that it exports, the update will be visible in its imported value.",
        "prefix": "ex"
    },
    "Pattern,arraySum": {
        "body": [
            "$1.reduce((acc, cur) => acc + cur, 0)"
        ],
        "description": "Sums all values in an array.",
        "prefix": "saviaa"
    },
    "Pattern.cloneObject": {
        "body": [
            "const $2 = { ...$1 }"
        ],
        "description": "Clones an object using the spread operator.",
        "prefix": "clo"
    },
    "Pattern.consoleLogJson": {
        "body": [
            "console.log(JSON.stringify($1, null, 2))"
        ],
        "description": "Logs a JavaScript object as pretty-printed JSON.",
        "prefix": "lajoapj"
    },
    "Pattern.debounceFunction": {
        "body": [
            "function debounce(fn, delay) {",
            "  let timeoutId;",
            "  return function(...args) {",
            "    clearTimeout(timeoutId);",
            "    timeoutId = setTimeout(() => fn.apply(this, args), delay);",
            "  };",
            "}"
        ],
        "description": "Creates a debounced function that delays invoking fn until after delay ms have elapsed.",
        "prefix": "debfn"
    },
    "Pattern.deepCloneObject": {
        "body": [
            "const $2 = JSON.parse(JSON.stringify($1))"
        ],
        "description": "Deep clones an object using JSON methods.",
        "prefix": "dcl"
    },
    "Pattern.doWhile": {
        "body": [
            "do {",
            "\t$1",
            "} while ()"
        ],
        "description": "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false.",
        "prefix": "do"
    },
    "Pattern.FinalizationRegistry": {
        "body": [
            "new FinalizationRegistry($1 => $1)"
        ],
        "description": "Lets you request a callback when an object is garbage-collected.",
        "prefix": "fin"
    },
    "Pattern.for": {
        "body": [
            "const $1Len = $1.length",
            "for (let i = 0; i < $1Len; i += 1) {",
            "\tconst $1Item = $1[i]",
            "}"
        ],
        "description": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.",
        "prefix": "for"
    },
    "Pattern.forAwaitOf": {
        "body": [
            "for await (let item of $1) {",
            "\t",
            "}"
        ],
        "description": "The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables.",
        "prefix": "foraw"
    },
    "Pattern.forIn": {
        "body": [
            "for (const key in $1) {",
            "\t",
            "}"
        ],
        "description": "The for...in statement iterates over all non-Symbol, enumerable properties of an object.",
        "prefix": "forin"
    },
    "Pattern.forMin": {
        "body": [
            "for (let j = 0; j < $1Len; j += 1) {",
            "\tconst $1Item = $1[j]",
            "}"
        ],
        "description": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.",
        "prefix": "form"
    },
    "Pattern.forOf": {
        "body": [
            "for (const item of $1) {",
            "\t",
            "}"
        ],
        "description": "The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables.",
        "prefix": "forof"
    },
    "Pattern.forReverse": {
        "body": [
            "for (let r = $1Len - 1; r >= 0; r -= 1) {",
            "\tconst $1Item = $1[r]",
            "}"
        ],
        "description": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.",
        "prefix": "forr"
    },
    "Pattern.import": {
        "body": [
            "import  from $1"
        ],
        "description": "The static import statement is used to import bindings which are exported by another module.",
        "prefix": "imp"
    },
    "Pattern.isEmptyArray": {
        "body": [
            "Array.isArray($1) && $1.length === 0"
        ],
        "description": "Checks if an array is empty.",
        "prefix": "iea"
    },
    "Pattern.isEmptyObject": {
        "body": [
            "Object.keys($1).length === 0"
        ],
        "description": "Checks if an object is empty.",
        "prefix": "ieo"
    },
    "Pattern.randomInteger": {
        "body": [
            "Math.floor(Math.random() * ($2 - $1 + 1)) + $1"
        ],
        "description": "Generates a random integer between two values, inclusive.",
        "prefix": "ran"
    },
    "Pattern.removeDuplicatesArray": {
        "body": [
            "[...new Set($1)]"
        ],
        "description": "Removes duplicate values from an array.",
        "prefix": "rda"
    },
    "Pattern.shortArrowFunction": {
        "body": [
            "const $1 = ($2) => $3"
        ],
        "description": "Creates a concise arrow function.",
        "prefix": "saf"
    },
    "Promise.resolve": {
        "body": [
            "Promise.resolve($1)"
        ],
        "description": "Returns a Promise object that is resolved with a given value.",
        "prefix": "prore"
    }
}