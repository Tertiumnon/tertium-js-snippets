{
    "Console.dir": {
        "prefix": "cd",
        "body": [
            "console.dir($1);"
        ],
        "description": "The Console method dir() displays an interactive list of the properties of the specified JavaScript object."
    },
    "Console.dir min": {
        "prefix": "cdm",
        "body": [
            "console.dir($1)"
        ],
        "description": "The Console method dir() displays an interactive list of the properties of the specified JavaScript object."
    },
    "Console.error": {
        "prefix": "ce",
        "body": [
            "console.error($1);"
        ],
        "description": "Outputs an error message to the Web Console."
    },
    "Console.error min": {
        "prefix": "cem",
        "body": [
            "console.error($1)"
        ],
        "description": "Outputs an error message to the Web Console."
    },
    "Console.info": {
        "prefix": "ci",
        "body": [
            "console.info($1);"
        ],
        "description": "Outputs an informational message to the Web Console. Only in Firefox, a small \"i\" icon is displayed next to these items in the Web Console's log."
    },
    "Console.info min": {
        "prefix": "cim",
        "body": [
            "console.info($1)"
        ],
        "description": "Outputs an informational message to the Web Console. Only in Firefox, a small \"i\" icon is displayed next to these items in the Web Console's log."
    },
    "Console.log": {
        "prefix": "cl",
        "body": [
            "console.log($1);"
        ],
        "description": "The Console method log() outputs a message to the web console."
    },
    "Console.log min": {
        "prefix": "clm",
        "body": [
            "console.log($1)"
        ],
        "description": "The Console method log() outputs a message to the web console."
    },
    "Console.warn": {
        "prefix": "cw",
        "body": [
            "console.warn($1);"
        ],
        "description": "Outputs a warning message to the Web Console."
    },
    "Console.warn min": {
        "prefix": "cwm",
        "body": [
            "console.warn($1)"
        ],
        "description": "Outputs a warning message to the Web Console."
    },
    "debugger": {
        "prefix": "de",
        "body": [
            "debugger;"
        ],
        "description": "The debugger statement invokes any available debugging functionality, such as setting a breakpoint."
    },
    "document": {
        "prefix": "doc",
        "body": [
            "document"
        ],
        "description": "document"
    },
    "EventTarget.addEventListener": {
        "prefix": ".ae",
        "body": [
            ".addEventListener('$1', );"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target."
    },
    "EventTarget.removeEventListener": {
        "prefix": ".re",
        "body": [
            ".removeEventListener('$1', );"
        ],
        "description": "The EventTarget.removeEventListener() method removes from the EventTarget an event listener previously registered with EventTarget.addEventListener()."
    },
    "EventTarget.addEventListener blur": {
        "prefix": ".aeb",
        "body": [
            ".addEventListener('blur', $1);"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target."
    },
    "EventTarget.addEventListener click": {
        "prefix": ".aec",
        "body": [
            ".addEventListener('click', $1);"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target."
    },
    "EventTarget.addEventListener change": {
        "prefix": ".aech",
        "body": [
            ".addEventListener('change', $1);"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target."
    },
    "EventTarget.addEventListener focus": {
        "prefix": ".aef",
        "body": [
            ".addEventListener('focus', $1);"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target."
    },
    "EventTarget.addEventListener focusout": {
        "prefix": ".aefo",
        "body": [
            ".addEventListener('focusout', $1);"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target."
    },
    "EventTarget.addEventListener input": {
        "prefix": ".aei",
        "body": [
            ".addEventListener('input', $1);"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target."
    },
    "EventTarget.addEventListener keydown": {
        "prefix": ".aekd",
        "body": [
            ".addEventListener('keydown', $1);"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target."
    },
    "EventTarget.addEventListener mouseover": {
        "prefix": ".aemov",
        "body": [
            ".addEventListener('mouseover', $1);"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target."
    },
    "EventTarget.addEventListener mouseout": {
        "prefix": ".aemo",
        "body": [
            ".addEventListener('mouseout', $1);"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target."
    },
    "EventTarget.dispatchEvent": {
        "prefix": ".de",
        "body": [
            ".dispatchEvent($1)"
        ],
        "description": "Dispatches an Event at the specified EventTarget, (synchronously) invoking the affected EventListeners in the appropriate order."
    },
    "Node.parentElement": {
        "prefix": ".pe",
        "body": [
            ".parentElement"
        ],
        "description": "The Node.parentElement read-only property returns the DOM node's parent Element, or null if the node either has no parent, or its parent isn't a DOM Element."
    },
    "Node.parentNode": {
        "prefix": ".pn",
        "body": [
            ".parentNode"
        ],
        "description": "The Node.parentNode read-only property returns the parent of the specified node in the DOM tree."
    },
    "Node.appendChild": {
        "prefix": ".ac",
        "body": [
            ".appendChild($1)"
        ],
        "description": "The Node.appendChild() method adds a node to the end of the list of children of a specified parent node."
    },
    "Node.insertBefore": {
        "prefix": ".ib",
        "body": [
            ".insertBefore($1)"
        ],
        "description": "The Node.insertBefore() method inserts a node before the reference node as a child of a specified parent node."
    },
    "Node.cloneNode": {
        "prefix": ".cn",
        "body": [
            ".cloneNode($1)"
        ],
        "description": "The Node.cloneNode() method returns a duplicate of the node on which this method was called."
    },
    "Node.contains": {
        "prefix": ".cont",
        "body": [
            ".contains($1)"
        ],
        "description": "The Node.contains() method returns a Boolean value indicating whether a node is a descendant of a given node."
    },
    "Node.removeChild": {
        "prefix": ".rmc",
        "body": [
            ".removeChild($1)"
        ],
        "description": "The Node.removeChild() method removes a child node from the DOM and returns the removed node."
    },
    "Node.replaceChild": {
        "prefix": ".rc",
        "body": [
            ".replaceChild($1, )"
        ],
        "description": "The Node.replaceChild() method replaces a child node within the given (parent) node."
    },
    "Document.createElement": {
        "prefix": "cel",
        "body": [
            "const $1 = document.createElement('$1');"
        ],
        "description": "In an HTML document, the document.createElement() method creates the HTML element specified by tagName, or an HTMLUnknownElement if tagName isn't recognized."
    },
    "class": {
        "prefix": "cla",
        "body": [
            "class $1 {",
            "\tconstructor(props) {}",
            "}"
        ],
        "description": "The class declaration creates a new class with a given name using prototype-based inheritance."
    },
    "class export": {
        "prefix": "clae",
        "body": [
            "export class $1 {",
            "\tconstructor(props) {}",
            "}"
        ],
        "description": "The class declaration creates a new class with a given name using prototype-based inheritance."
    },
    "class export default": {
        "prefix": "claed",
        "body": [
            "export default class $1 {",
            "\tconstructor(props) {}",
            "}"
        ],
        "description": "The class declaration creates a new class with a given name using prototype-based inheritance."
    },
    "Element.classList": {
        "prefix": ".cl",
        "body": [
            ".classList"
        ],
        "description": "The Element.classList is a read-only property that returns a live DOMTokenList collection of the class attributes of the element."
    },
    "Element.classList.add": {
        "prefix": ".cla",
        "body": [
            ".classList.add('$1')"
        ],
        "description": "Adds the specified class values. If these classes already exist in the element's class attribute they are ignored."
    },
    "Element.classList.contains": {
        "prefix": ".clc",
        "body": [
            ".classList.contains('$1')"
        ],
        "description": "Checks if the specified class value exists in the element's class attribute."
    },
    "Element.classList.remove": {
        "prefix": ".clrm",
        "body": [
            ".classList.remove('$1')"
        ],
        "description": "Removes the specified class values."
    },
    "Element.classList.replace": {
        "prefix": ".clr",
        "body": [
            ".classList.replace('$1', '')"
        ],
        "description": "Replaces an existing class with a new class."
    },
    "Element.classList.toggle": {
        "prefix": ".clt",
        "body": [
            ".classList.toggle('$1')"
        ],
        "description": "When only one argument is present: Toggle the class value; i.e., if the class exists then remove it and return false, if not, then add it and return true."
    },
    "Node.innerHTML": {
        "prefix": ".ih",
        "body": [
            ".innerHTML"
        ],
        "description": "The Element property innerHTML gets or sets the HTML or XML markup contained within the element."
    },
    "Node.innerHTML set": {
        "prefix": ".ihs",
        "body": [
            ".innerHTML = '$1'"
        ],
        "description": "The Element property innerHTML gets or sets the HTML or XML markup contained within the element."
    },
    "Node.outerHTML": {
        "prefix": ".oh",
        "body": [
            ".outerHTML"
        ],
        "description": "The outerHTML attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants."
    },
    "Node.outerHTML set": {
        "prefix": ".ohs",
        "body": [
            ".outerHTML = '$1'"
        ],
        "description": "The outerHTML attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants."
    },
    "Node.textContent": {
        "prefix": ".tc",
        "body": [
            ".textContent"
        ],
        "description": "The textContent property of the Node interface represents the text content of the node and its descendants."
    },
    "Node.textContent set": {
        "prefix": ".tcs",
        "body": [
            ".textContent = '$1'"
        ],
        "description": "The textContent property of the Node interface represents the text content of the node and its descendants."
    },
    "Element.getElementById": {
        "prefix": ".gebi",
        "body": [
            ".getElementById('$1')"
        ],
        "description": "The Document method getElementById() returns an Element object representing the element whose id property matches the specified string."
    },
    "Element.getElementsByClassName": {
        "prefix": ".gebc",
        "body": [
            ".getElementsByClassName('$1')"
        ],
        "description": "The Element method getElementsByClassName() returns a live HTMLCollection which contains every descendant element which has the specified class name or names."
    },
    "Element.getElementsByTagName": {
        "prefix": ".gebt",
        "body": [
            ".getElementsByTagName('$1')"
        ],
        "description": "The Element.getElementsByTagName() method returns a live HTMLCollection of elements with the given tag name."
    },
    "Element.getAttribute": {
        "prefix": ".ga",
        "body": [
            ".getAttribute('$1')"
        ],
        "description": "The getAttribute() method of the Element interface returns the value of a specified attribute on the element."
    },
    "Element.hasAttribute": {
        "prefix": ".ha",
        "body": [
            ".hasAttribute('$1')"
        ],
        "description": "The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not."
    },
    "Element.setAttribute": {
        "prefix": ".sa",
        "body": [
            ".setAttribute('$1', '')"
        ],
        "description": ".setAttribute('<attr: String>', '<val: String>')"
    },
    "Element.removeAttribute": {
        "prefix": ".ra",
        "body": [
            ".removeAttribute('$1')"
        ],
        "description": "The Element method removeAttribute() removes the attribute with the specified name from the element."
    },
    "Element.querySelector": {
        "prefix": ".qs",
        "body": [
            ".querySelector('$1')"
        ],
        "description": "The querySelector() method of the Element interface returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors."
    },
    "Element.querySelectorAll": {
        "prefix": ".qsa",
        "body": [
            ".querySelectorAll('$1')"
        ],
        "description": "The Element method querySelectorAll() returns a static (not live) NodeList representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called."
    },
    "Set": {
        "prefix": "set",
        "body": [
            "new Set($1)"
        ],
        "description": "The Set object lets you store unique values of any type, whether primitive values or object references."
    },
    "Map": {
        "prefix": "map",
        "body": [
            "new Map($1)"
        ],
        "description": "The Map object holds key-value pairs and remembers the original insertion order of the keys."
    },
    "Import": {
        "prefix": "imp",
        "body": [
            "import  from '$1';"
        ],
        "description": "The static import statement is used to import bindings which are exported by another module."
    },
    "Import multiple": {
        "prefix": "impm",
        "body": [
            "import {  } from '$1';"
        ],
        "description": "The static import statement is used to import bindings which are exported by another module."
    },
    "Array.isArray": {
        "prefix": ".isa",
        "body": [
            ".isArray($1)"
        ],
        "description": "The Array.isArray() method determines whether the passed value is an Array."
    },
    "Array.from": {
        "prefix": ".fro",
        "body": [
            ".from($1)"
        ],
        "description": "The Array.from() method creates a new, shallow-copied Array instance from an array-like or iterable object."
    },
    "Array.prototype.concat": {
        "prefix": ".con",
        "body": [
            ".concat($1)"
        ],
        "description": "The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array."
    },
    "Array.prototype.entries": {
        "prefix": "obje",
        "body": [
            "Object.entries($1)"
        ],
        "description": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array."
    },
    "Array.prototype.keys": {
        "prefix": "objk",
        "body": [
            "Object.keys($1)"
        ],
        "description": "The keys() method returns a new Array Iterator object that contains the keys for each index in the array."
    },
    "Array.prototype.values": {
        "prefix": "objv",
        "body": [
            "Object.values($1)"
        ],
        "description": "The values() method returns a new Array Iterator object that contains the values for each index in the array."
    },
    "Array.prototype.map": {
        "prefix": ".map",
        "body": [
            ".map((item, i, arr) => {",
            "\t$1",
            "})"
        ],
        "description": "The map() method creates a new array with the results of calling a provided function on every element in the calling array."
    },
    "Array.prototype.map min": {
        "prefix": ".mapm",
        "body": [
            ".map(item => $1)"
        ],
        "description": "The map() method creates a new array with the results of calling a provided function on every element in the calling array."
    },
    "Array.prototype.every": {
        "prefix": ".eve",
        "body": [
            ".every((item, i, arr) => {",
            "\t$1",
            "})"
        ],
        "description": "The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value."
    },
    "Array.prototype.every min": {
        "prefix": ".evem",
        "body": [
            ".every(item => $1)"
        ],
        "description": "The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value."
    },
    "Array.prototype.filter": {
        "prefix": ".fil",
        "body": [
            ".filter((item, i, arr) => {",
            "\t$1",
            "})"
        ],
        "description": "The filter() method creates a new array with all elements that pass the test implemented by the provided function."
    },
    "Array.prototype.filter min": {
        "prefix": ".film",
        "body": [
            ".filter(item => $1)"
        ],
        "description": "The filter() method creates a new array with all elements that pass the test implemented by the provided function."
    },
    "Array.prototype.forEach": {
        "prefix": ".fore",
        "body": [
            ".forEach((item, i, arr) => {",
            "\t$1",
            "})"
        ],
        "description": "The forEach() method executes a provided function once for each array element."
    },
    "Array.prototype.forEach min": {
        "prefix": ".forem",
        "body": [
            ".forEach(item => $1)"
        ],
        "description": "The forEach() method executes a provided function once for each array element."
    },
    "for": {
        "prefix": "for",
        "body": [
            "const l = arr.length;",
            "for (let $1 = 0; $1 < l; $1 += 1) {",
            "\tconst item = arr[$1];",
            "}"
        ],
        "description": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop."
    },
    "for min": {
        "prefix": "form",
        "body": [
            "for (let $1 = 0; $1 < l; $1 += 1) {",
            "\t",
            "}"
        ],
        "description": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop."
    },
    "for in": {
        "prefix": "forin",
        "body": [
            "for (const prop in $1) {",
            "\t",
            "}"
        ],
        "description": "The for...in statement iterates over all non-Symbol, enumerable properties of an object."
    },
    "for of": {
        "prefix": "forof",
        "body": [
            "for (const item of $1) {",
            "\t",
            "}"
        ],
        "description": "The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables."
    },
    "while": {
        "prefix": "while",
        "body": [
            "while ($1) {",
            "\t",
            "}"
        ],
        "description": "The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true."
    },
    "do while": {
        "prefix": "do",
        "body": [
            "do {",
            "\t$1",
            "} while ();"
        ],
        "description": "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false."
    },
    "switch": {
        "prefix": "sw",
        "body": [
            "switch ($1) {",
            "\tcase '':",
            "\t\tbreak;",
            "\tdefault:",
            "}"
        ],
        "description": "The switch statement evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case."
    },
    "function": {
        "prefix": "fn",
        "body": [
            "function $1() {",
            "\t",
            "}"
        ],
        "description": "A function is a code snippet that can be called by other code or by itself, or a variable that refers to the function."
    },
    "function iife": {
        "prefix": "iife",
        "body": [
            "(function() {",
            "\t$1",
            "})();"
        ],
        "description": "An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined."
    },
    "anonymous function": {
        "prefix": "fna",
        "body": [
            "function() {",
            "\t$1",
            "}"
        ],
        "description": "An anonymous function is a function without a function name."
    },
    "function arrow": {
        "prefix": "fnar",
        "body": [
            "() => {",
            "\t$1",
            "}"
        ],
        "description": "An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords."
    },
    "function arrow min": {
        "prefix": "fnarm",
        "body": [
            "() => { $1 }"
        ],
        "description": "An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords."
    },
    "function arrow with argument": {
        "prefix": "fnarg",
        "body": [
            "($1) => {",
            "\t",
            "}"
        ],
        "description": "An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords."
    },
    "function arrow array": {
        "prefix": "fnari",
        "body": [
            "(item) => {",
            "\t$1",
            "}"
        ],
        "description": "An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords."
    },
    "function arrow min item": {
        "prefix": "fnarmi",
        "body": [
            "item => $1"
        ],
        "description": "An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords."
    },
    "function arrow array full": {
        "prefix": "fnaraf",
        "body": [
            "(item, i, arr) => {",
            "\t$1",
            "}"
        ],
        "description": "An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords."
    },
    "const function arrow": {
        "prefix": "fnarcon",
        "body": [
            "const $1 = () => {",
            "\t",
            "};"
        ],
        "description": "const function arrow"
    },
    "Function.prototype.apply": {
        "prefix": ".apply",
        "body": [
            ".apply($1)"
        ],
        "description": "The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object)."
    },
    "Function.prototype.bind": {
        "prefix": ".bind",
        "body": [
            ".bind($1)"
        ],
        "description": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called."
    },
    "Function.prototype.call": {
        "prefix": ".call",
        "body": [
            ".call($1)"
        ],
        "description": "The call() method calls a function with a given this value and arguments provided individually."
    },
    "Function.prototype": {
        "prefix": ".proto",
        "body": [
            ".prototype"
        ],
        "description": "The Function.prototype property represents the Function prototype object."
    },
    "JSON.parse": {
        "prefix": "jsonp",
        "body": [
            "JSON.parse($1)"
        ],
        "description": "The JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string."
    },
    "JSON.stringify": {
        "prefix": "jsons",
        "body": [
            "JSON.stringify($1)"
        ],
        "description": "The JSON.stringify() method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified."
    },
    "WindowOrWorkerGlobalScope.setInterval": {
        "prefix": ".si",
        "body": [
            ".setInterval(() => {",
            "\t$1",
            "}, 3000);"
        ],
        "description": "The setInterval() method, offered on the Window and Worker interfaces, repeatedly calls a function or executes a code snippet, with a fixed time delay between each call."
    },
    "WindowOrWorkerGlobalScope.setInterval min": {
        "prefix": ".sim",
        "body": [
            ".setInterval(() => {$1}, 3000)"
        ],
        "description": "The setInterval() method, offered on the Window and Worker interfaces, repeatedly calls a function or executes a code snippet, with a fixed time delay between each call."
    },
    "WindowOrWorkerGlobalScope.clearInterval": {
        "prefix": ".ci",
        "body": [
            ".clearInterval($1)"
        ],
        "description": "The clearInterval() method of the WindowOrWorkerGlobalScope mixin cancels a timed, repeating action which was previously established by a call to setInterval()."
    },
    "WindowOrWorkerGlobalScope.setTimeout": {
        "prefix": ".st",
        "body": [
            ".setTimeout(() => {",
            "\t$1",
            "}, 3000);"
        ],
        "description": "The setTimeout() method of the WindowOrWorkerGlobalScope mixin (and successor to Window.setTimeout()) sets a timer which executes a function or specified piece of code once the timer expires."
    },
    "WindowOrWorkerGlobalScope.setTimeout min": {
        "prefix": ".stm",
        "body": [
            ".setTimeout(() => {$1}, 3000)"
        ],
        "description": "The setTimeout() method of the WindowOrWorkerGlobalScope mixin (and successor to Window.setTimeout()) sets a timer which executes a function or specified piece of code once the timer expires."
    },
    "WindowOrWorkerGlobalScope.clearTime": {
        "prefix": ".ct",
        "body": [
            ".clearTimeout($1)"
        ],
        "description": "The clearTimeout() method of the WindowOrWorkerGlobalScope mixin cancels a timeout previously established by calling setTimeout()."
    },
    "use strict": {
        "prefix": "us",
        "body": [
            "'use strict';"
        ],
        "description": "'use strict'"
    },
    "Window.alert": {
        "prefix": "alert",
        "body": [
            "alert('$1');"
        ],
        "description": "The Window.alert() method displays an alert dialog with the optional specified content and an OK button."
    },
    "Window.confirm": {
        "prefix": "confirm",
        "body": [
            "confirm('$1');"
        ],
        "description": "The Window.confirm() method displays a modal dialog with an optional message and two buttons: OK and Cancel."
    },
    "Window.prompt": {
        "prefix": "prompt",
        "body": [
            "prompt('$1');"
        ],
        "description": "The Window.prompt() displays a dialog with an optional message prompting the user to input some text."
    }
}