{
    "anonymous function": {
        "body": [
            "function() {",
            "\t$1",
            "}"
        ],
        "description": "An anonymous function is a function without a function name.",
        "prefix": "fu"
    },
    "Array": {
        "body": [
            "Array"
        ],
        "description": "The JavaScript Array class is a global object that is used in the construction of arrays which are high-level, list-like objects.",
        "prefix": "ar"
    },
    "array sum": {
        "body": [
            "$1.reduce((acc, cur) => acc + cur, 0)"
        ],
        "description": "Sums all values in an array.",
        "prefix": "asu"
    },
    "Array.from(arrayLike, mapFn, thisArg)": {
        "body": [
            ".from($1)"
        ],
        "description": "The Array.from() method creates a new, shallow-copied Array instance from an array-like or iterable object.",
        "prefix": ".fr"
    },
    "Array.from(arrayLike, mapFn, thisArg) ": {
        "body": [
            "Array.from($1)"
        ],
        "description": "The Array.from() method creates a new, shallow-copied Array instance from an array-like or iterable object.",
        "prefix": "af"
    },
    "Array.isArray(value)": {
        "body": [
            ".isArray($1)"
        ],
        "description": "The Array.isArray() method determines whether the passed value is an Array.",
        "prefix": ".is"
    },
    "Array.isArray(value) ": {
        "body": [
            "Array.isArray($1)"
        ],
        "description": "The Array.isArray() method determines whether the passed value is an Array.",
        "prefix": "ai"
    },
    "Array.of(element0, element1, ... , elementN)": {
        "body": [
            ".of($1)"
        ],
        "description": "The Array.from() method creates a new, shallow-copied Array instance from an array-like or iterable object.",
        "prefix": ".of"
    },
    "Array.of(element0, element1, ... , elementN) ": {
        "body": [
            "Array.of($1)"
        ],
        "description": "The Array.from() method creates a new, shallow-copied Array instance from an array-like or iterable object.",
        "prefix": "ao"
    },
    "Array.prototype.at": {
        "body": [
            ".at($1)"
        ],
        "description": "The at() method takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.",
        "prefix": ".at"
    },
    "Array.prototype.concat": {
        "body": [
            ".concat($1)"
        ],
        "description": "The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.",
        "prefix": ".co"
    },
    "Array.prototype.copyWithin": {
        "body": [
            ".copyWithin($1)"
        ],
        "description": "The copyWithin() method shallow copies part of an array to another location in the same array and returns it without modifying its length.",
        "prefix": ".co"
    },
    "Array.prototype.entries": {
        "body": [
            ".entries($1)"
        ],
        "description": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
        "prefix": ".en"
    },
    "Array.prototype.every": {
        "body": [
            ".every($1)"
        ],
        "description": "The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.",
        "prefix": ".ev"
    },
    "Array.prototype.fill": {
        "body": [
            ".fill($1)"
        ],
        "description": "The fill() method changes all elements in an array to a static value, from a start index (default 0) to an end index (default array.length). It returns the modified array.",
        "prefix": ".fi"
    },
    "Array.prototype.filter": {
        "body": [
            ".filter($1)"
        ],
        "description": "The filter() method creates a new array with all elements that pass the test implemented by the provided function.",
        "prefix": ".fi"
    },
    "Array.prototype.find": {
        "body": [
            ".find($1)"
        ],
        "description": "The find() method returns the value of the first element in the provided array that satisfies the provided testing function.",
        "prefix": ".fi"
    },
    "Array.prototype.findIndex": {
        "body": [
            ".findIndex($1 => $1)"
        ],
        "description": "The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.",
        "prefix": ".fndx"
    },
    "Array.prototype.forEach": {
        "body": [
            ".forEach($1)"
        ],
        "description": "The forEach() method executes a provided function once for each array element.",
        "prefix": ".frch"
    },
    "Array.prototype.includes": {
        "body": [
            ".includes($1)"
        ],
        "description": "The includes() method determines whether an array includes a certain value among its entries, returning true or false as appropriate.",
        "prefix": ".in"
    },
    "Array.prototype.indexOf": {
        "body": [
            ".indexOf($1)"
        ],
        "description": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.",
        "prefix": ".ino"
    },
    "Array.prototype.join": {
        "body": [
            ".join($1)"
        ],
        "description": "The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.",
        "prefix": ".jo"
    },
    "Array.prototype.keys": {
        "body": [
            ".keys($1)"
        ],
        "description": "The keys() method returns a new Array Iterator object that contains the keys for each index in the array.",
        "prefix": ".ke"
    },
    "Array.prototype.lastIndexOf": {
        "body": [
            ".lastIndexOf($1)"
        ],
        "description": "The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.",
        "prefix": ".la"
    },
    "Array.prototype.map": {
        "body": [
            ".map($1)"
        ],
        "description": "The map() method creates a new array with the results of calling a provided function on every element in the calling array.",
        "prefix": ".ma"
    },
    "Array.prototype.pop": {
        "body": [
            ".pop()"
        ],
        "description": "The pop() method removes the last element from an array and returns that element. This method changes the length of the array.",
        "prefix": ".po"
    },
    "Array.prototype.push": {
        "body": [
            ".push($1)"
        ],
        "description": "The push() method adds zero or more elements to the end of an array and returns the new length of the array.",
        "prefix": ".pu"
    },
    "Array.prototype.reduce": {
        "body": [
            ".reduce($1)"
        ],
        "description": "The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in single output value.",
        "prefix": ".re"
    },
    "Array.prototype.reduceRight": {
        "body": [
            ".reduceRight($1)"
        ],
        "description": "The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.",
        "prefix": ".re"
    },
    "Array.prototype.reverse": {
        "body": [
            ".reverse()"
        ],
        "description": "The reverse() method reverses an array in place. The first array element becomes the last, and the last array element becomes the first.",
        "prefix": ".re"
    },
    "Array.prototype.shift": {
        "body": [
            ".shift()"
        ],
        "description": "The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.",
        "prefix": ".sh"
    },
    "Array.prototype.slice": {
        "body": [
            ".slice()"
        ],
        "description": "The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.",
        "prefix": ".sl"
    },
    "Array.prototype.some": {
        "body": [
            ".some($1)"
        ],
        "description": "The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.",
        "prefix": ".so"
    },
    "Array.prototype.sort": {
        "body": [
            ".sort($1)"
        ],
        "description": "The sort() method sorts the elements of an array in place and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.",
        "prefix": ".so"
    },
    "Array.prototype.sort full function": {
        "body": [
            "(a, b) => {",
            "\tif ($1) {",
            "\t\treturn -1",
            "\t}",
            "\tif () {",
            "\t\treturn 1",
            "\t}",
            "\treturn 0",
            "}"
        ],
        "description": "The sort() method sorts the elements of an array in place and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.",
        "prefix": ".sorf"
    },
    "Array.prototype.sort min function": {
        "body": [
            "(a, b) => a - b"
        ],
        "description": "The sort() method sorts the elements of an array in place and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.",
        "prefix": ".sorm"
    },
    "Array.prototype.splice": {
        "body": [
            ".splice($1)"
        ],
        "description": "The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.",
        "prefix": ".spl"
    },
    "Array.prototype.toLocaleString": {
        "body": [
            ".toLocaleString($1)"
        ],
        "description": "The toLocaleString() method returns a string representing the elements of the array.",
        "prefix": ".tols"
    },
    "Array.prototype.toLocaleString": {
        "body": [
            ".toLocaleString($1)"
        ],
        "description": "The toLocaleString() method returns a string representing the elements of the array.",
        "prefix": ".tols"
    },
    "Array.prototype.toReversed": {
        "body": [
            ".toReversed()"
        ],
        "description": "The toReversed() method of Array instances returns a new array with the elements in reversed order. This method does not modify the original array.",
        "prefix": ".tor"
    },
    "Array.prototype.toSorted": {
        "body": [
            ".toSorted($1)"
        ],
        "description": "The toSorted() method of Array instances returns a new array with the elements sorted. This method does not modify the original array.",
        "prefix": ".tos"
    },
    "Array.prototype.toSpliced": {
        "body": [
            ".toSpliced($1)"
        ],
        "description": "The toSpliced() method of Array instances returns a new array with some elements removed and/or replaced at a given index. This method does not modify the original array.",
        "prefix": ".tosp"
    },
    "Array.prototype.toString": {
        "body": [
            ".toString($1)"
        ],
        "description": "The toString() method returns a string representing the specified array and its elements.",
        "prefix": ".tos"
    },
    "Array.prototype.unshift": {
        "body": [
            ".unshift($1)"
        ],
        "description": "The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.",
        "prefix": ".uns"
    },
    "Array.prototype.values": {
        "body": [
            ".values($1)"
        ],
        "description": "The values() method returns a new Array Iterator object that contains the values for each index in the array.",
        "prefix": ".val"
    },
    "Array.prototype.with": {
        "body": [
            ".with($1, )"
        ],
        "description": "The with() method of Array instances is a copying method that returns a new array with a changed element at a given index.",
        "prefix": ".wi"
    },
    "class": {
        "body": [
            "class $1 {",
            "\tconstructor(props) {}",
            "}"
        ],
        "description": "The class declaration creates a new class with a given name using prototype-based inheritance.",
        "prefix": "cla"
    },
    "clone object": {
        "body": [
            "const $2 = { ...$1 }"
        ],
        "description": "Clones an object using the spread operator.",
        "prefix": "clo"
    },
    "console.assert": {
        "body": [
            "console.assert($1, '$2')"
        ],
        "description": "Writes an error message to the console if the assertion is false.",
        "prefix": "cas"
    },
    "console.clear": {
        "body": [
            "console.clear()"
        ],
        "description": "Clears the console.",
        "prefix": "ccl"
    },
    "console.count": {
        "body": [
            "console.count($1)"
        ],
        "description": "Logs the number of times that this particular call to count() has been called.",
        "prefix": "cco"
    },
    "console.countReset": {
        "body": [
            "console.countReset($1)"
        ],
        "description": "Resets the count for the specified label.",
        "prefix": "ccr"
    },
    "console.debug": {
        "body": [
            "console.debug($1)"
        ],
        "description": "Outputs a debug message to the Web Console.",
        "prefix": "cde"
    },
    "console.dir": {
        "body": [
            "console.dir($1)"
        ],
        "description": "Displays an interactive list of the properties of the specified JavaScript object.",
        "prefix": "cd"
    },
    "console.error": {
        "body": [
            "console.error($1)"
        ],
        "description": "Outputs an error message to the Web Console.",
        "prefix": "cer"
    },
    "console.group": {
        "body": [
            "console.group($1)"
        ],
        "description": "Creates a new inline group in the console.",
        "prefix": "cgr"
    },
    "console.groupCollapsed": {
        "body": [
            "console.groupCollapsed($1)"
        ],
        "description": "Creates a new inline group in the console, but collapsed by default.",
        "prefix": "cgc"
    },
    "console.groupEnd": {
        "body": [
            "console.groupEnd()"
        ],
        "description": "Exits the current inline group in the console.",
        "prefix": "cge"
    },
    "console.info": {
        "body": [
            "console.info($1)"
        ],
        "description": "Outputs an informational message to the Web Console.",
        "prefix": "ci"
    },
    "console.log": {
        "body": [
            "console.log($1)"
        ],
        "description": "Outputs a message to the Web Console.",
        "prefix": "clg"
    },
    "console.log JSON": {
        "body": [
            "console.log(JSON.stringify($1, null, 2))"
        ],
        "description": "Logs a JavaScript object as pretty-printed JSON.",
        "prefix": "clj"
    },
    "console.table": {
        "body": [
            "console.table($1)"
        ],
        "description": "Displays tabular data as a table in the console.",
        "prefix": "cta"
    },
    "console.time": {
        "body": [
            "console.time($1)"
        ],
        "description": "Starts a timer you can use to track how long an operation takes.",
        "prefix": "cti"
    },
    "console.timeEnd": {
        "body": [
            "console.timeEnd($1)"
        ],
        "description": "Stops a timer that was previously started by console.time().",
        "prefix": "cte"
    },
    "console.timeLog": {
        "body": [
            "console.timeLog($1)"
        ],
        "description": "Logs the current value of a timer that was previously started by console.time().",
        "prefix": "ctl"
    },
    "console.trace": {
        "body": [
            "console.trace($1)"
        ],
        "description": "Outputs a stack trace to the Web Console.",
        "prefix": "ctr"
    },
    "console.warn": {
        "body": [
            "console.warn($1)"
        ],
        "description": "Outputs a warning message to the Web Console.",
        "prefix": "cwn"
    },
    "debounce function": {
        "body": [
            "function debounce(fn, delay) {",
            "  let timeoutId;",
            "  return function(...args) {",
            "    clearTimeout(timeoutId);",
            "    timeoutId = setTimeout(() => fn.apply(this, args), delay);",
            "  };",
            "}"
        ],
        "description": "Creates a debounced function that delays invoking fn until after delay ms have elapsed.",
        "prefix": "debfn"
    },
    "debugger": {
        "body": [
            "debugger"
        ],
        "description": "The debugger statement invokes any available debugging functionality, such as setting a breakpoint.",
        "prefix": "deb"
    },
    "deep clone object": {
        "body": [
            "const $2 = JSON.parse(JSON.stringify($1))"
        ],
        "description": "Deep clones an object using JSON methods.",
        "prefix": "dcl"
    },
    "default": {
        "body": [
            "default"
        ],
        "description": "Keyword",
        "prefix": "def"
    },
    "do while": {
        "body": [
            "do {",
            "\t$1",
            "} while ()"
        ],
        "description": "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false.",
        "prefix": "do"
    },
    "document": {
        "body": [
            "document"
        ],
        "description": "document",
        "prefix": "doc"
    },
    "Document.createElement": {
        "body": [
            ".createElement($1)"
        ],
        "description": "In an HTML document, the document.createElement() method creates the HTML element specified by tagName, or an HTMLUnknownElement if tagName isn't recognized.",
        "prefix": ".cre"
    },
    "Element.add": {
        "body": [
            ".add($1)"
        ],
        "description": "Adds the specified class values. If these classes already exist in the element's class attribute they are ignored.",
        "prefix": ".add"
    },
    "Element.classList": {
        "body": [
            ".classList"
        ],
        "description": "The Element.classList is a read-only property that returns a live DOMTokenList collection of the class attributes of the element.",
        "prefix": ".cla"
    },
    "Element.classList.contains": {
        "body": [
            ".contains($1)"
        ],
        "description": "Checks if the specified class value exists in the element's class attribute.",
        "prefix": ".con"
    },
    "Element.classList.remove": {
        "body": [
            ".remove($1)"
        ],
        "description": "Removes the specified class values.",
        "prefix": ".rem"
    },
    "Element.classList.replace": {
        "body": [
            ".replace($1, )"
        ],
        "description": "Replaces an existing class with a new class.",
        "prefix": ".rep"
    },
    "Element.classList.toggle": {
        "body": [
            ".toggle($1)"
        ],
        "description": "When only one argument is present: Toggle the class value; i.e., if the class exists then remove it and return false, if not, then add it and return true.",
        "prefix": ".tog"
    },
    "Element.getAttribute": {
        "body": [
            ".getAttribute($1)"
        ],
        "description": "The getAttribute() method of the Element interface returns the value of a specified attribute on the element.",
        "prefix": ".get"
    },
    "Element.getElementById": {
        "body": [
            ".getElementById($1)"
        ],
        "description": "The Document method getElementById() returns an Element object representing the element whose id property matches the specified string.",
        "prefix": ".get"
    },
    "Element.getElementsByClassName": {
        "body": [
            ".getElementsByClassName($1)"
        ],
        "description": "The Element method getElementsByClassName() returns a live HTMLCollection which contains every descendant element which has the specified class name or names.",
        "prefix": ".get"
    },
    "Element.getElementsByTagName": {
        "body": [
            ".getElementsByTagName($1)"
        ],
        "description": "The Element.getElementsByTagName() method returns a live HTMLCollection of elements with the given tag name.",
        "prefix": ".get"
    },
    "Element.hasAttribute": {
        "body": [
            ".hasAttribute($1)"
        ],
        "description": "The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not.",
        "prefix": ".has"
    },
    "Element.querySelector": {
        "body": [
            ".querySelector($1)"
        ],
        "description": "The querySelector() method of the Element interface returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.",
        "prefix": ".que"
    },
    "Element.querySelectorAll": {
        "body": [
            ".querySelectorAll($1)"
        ],
        "description": "The Element method querySelectorAll() returns a static (not live) NodeList representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called.",
        "prefix": ".que"
    },
    "Element.removeAttribute": {
        "body": [
            ".removeAttribute($1)"
        ],
        "description": "The Element method removeAttribute() removes the attribute with the specified name from the element.",
        "prefix": ".rem"
    },
    "Element.setAttribute": {
        "body": [
            ".setAttribute($1, )"
        ],
        "description": "Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.",
        "prefix": ".set"
    },
    "EventTarget.addEventListener": {
        "body": [
            ".addEventListener($1, )"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": ".add"
    },
    "EventTarget.addEventListener blur": {
        "body": [
            "blur"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "blu"
    },
    "EventTarget.addEventListener change": {
        "body": [
            "change"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "cha"
    },
    "EventTarget.addEventListener click": {
        "body": [
            "click"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "cli"
    },
    "EventTarget.addEventListener focus": {
        "body": [
            "focus"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "foc"
    },
    "EventTarget.addEventListener focusout": {
        "body": [
            "focusout"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "foc"
    },
    "EventTarget.addEventListener input": {
        "body": [
            "input"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "inp"
    },
    "EventTarget.addEventListener keydown": {
        "body": [
            "keydown"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "key"
    },
    "EventTarget.addEventListener mouseout": {
        "body": [
            "mouseout"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "mou"
    },
    "EventTarget.addEventListener mouseover": {
        "body": [
            "mouseover"
        ],
        "description": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
        "prefix": "mou"
    },
    "EventTarget.dispatchEvent": {
        "body": [
            ".dispatchEvent($1)"
        ],
        "description": "Dispatches an Event at the specified EventTarget, (synchronously) invoking the affected EventListeners in the appropriate order.",
        "prefix": ".dis"
    },
    "EventTarget.removeEventListener": {
        "body": [
            ".removeEventListener($1, )"
        ],
        "description": "The EventTarget.removeEventListener() method removes from the EventTarget an event listener previously registered with EventTarget.addEventListener().",
        "prefix": ".rem"
    },
    "export": {
        "body": [
            "export"
        ],
        "description": "The export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the import statement. The value of an imported binding is subject to change in the module that exports it. When a module updates the value of a binding that it exports, the update will be visible in its imported value.",
        "prefix": "exp"
    },
    "for": {
        "body": [
            "const $1Len = $1.length",
            "for (let i = 0; i < $1Len; i += 1) {",
            "\tconst $1Item = $1[i]",
            "}"
        ],
        "description": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.",
        "prefix": "for"
    },
    "for await of": {
        "body": [
            "for await (let item of $1) {",
            "\t",
            "}"
        ],
        "description": "The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables.",
        "prefix": "foraw"
    },
    "for in": {
        "body": [
            "for (const key in $1) {",
            "\t",
            "}"
        ],
        "description": "The for...in statement iterates over all non-Symbol, enumerable properties of an object.",
        "prefix": "forin"
    },
    "for min": {
        "body": [
            "for (let j = 0; j < $1Len; j += 1) {",
            "\tconst $1Item = $1[j]",
            "}"
        ],
        "description": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.",
        "prefix": "form"
    },
    "for of": {
        "body": [
            "for (const item of $1) {",
            "\t",
            "}"
        ],
        "description": "The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables.",
        "prefix": "forof"
    },
    "for reverse": {
        "body": [
            "for (let r = $1Len - 1; r >= 0; r -= 1) {",
            "\tconst $1Item = $1[r]",
            "}"
        ],
        "description": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.",
        "prefix": "forr"
    },
    "function": {
        "body": [
            "function $1() {",
            "\t",
            "}"
        ],
        "description": "A function is a code snippet that can be called by other code or by itself, or a variable that refers to the function.",
        "prefix": "fun"
    },
    "function arrow": {
        "body": [
            "($1) => {",
            "\t",
            "}"
        ],
        "description": "An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords.",
        "prefix": "fnar"
    },
    "function arrow min": {
        "body": [
            "($1) => $1"
        ],
        "description": "An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords.",
        "prefix": "fnarm"
    },
    "function iife": {
        "body": [
            "(function() {",
            "\t$1",
            "})()"
        ],
        "description": "An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.",
        "prefix": "iife"
    },
    "Function.prototype": {
        "body": [
            ".prototype"
        ],
        "description": "The Function.prototype property represents the Function prototype object.",
        "prefix": ".pro"
    },
    "Function.prototype.apply": {
        "body": [
            ".apply($1)"
        ],
        "description": "The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).",
        "prefix": ".app"
    },
    "Function.prototype.bind": {
        "body": [
            ".bind($1)"
        ],
        "description": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
        "prefix": ".bin"
    },
    "Function.prototype.call": {
        "body": [
            ".call($1)"
        ],
        "description": "The call() method calls a function with a given this value and arguments provided individually.",
        "prefix": ".cal"
    },
    "Import": {
        "body": [
            "import  from $1"
        ],
        "description": "The static import statement is used to import bindings which are exported by another module.",
        "prefix": "imp"
    },
    "is empty array": {
        "body": [
            "Array.isArray($1) && $1.length === 0"
        ],
        "description": "Checks if an array is empty.",
        "prefix": "iea"
    },
    "is empty object": {
        "body": [
            "Object.keys($1).length === 0"
        ],
        "description": "Checks if an object is empty.",
        "prefix": "ieo"
    },
    "JSON.parse": {
        "body": [
            "JSON.parse($1)"
        ],
        "description": "Parses a JSON string.",
        "prefix": "jsonpar"
    },
    "JSON.stringify": {
        "body": [
            "JSON.stringify($1)"
        ],
        "description": "Converts a value to a JSON string.",
        "prefix": "jsonstr"
    },
    "Object.entries(obj)": {
        "body": [
            ".entries($1)"
        ],
        "description": "The Object.entries() method returns an array of a given object's own enumerable string-keyed property [key, value] pairs.",
        "prefix": ".ent"
    },
    "Object.entries(obj) ": {
        "body": [
            "Object.entries($1)"
        ],
        "description": "The Object.entries() method returns an array of a given object's own enumerable string-keyed property [key, value] pairs.",
        "prefix": "objent"
    },
    "Object.freeze(obj)": {
        "body": [
            "Object.freeze($1)"
        ],
        "description": "The Object.freeze() method freezes an object.",
        "prefix": "objfrz"
    },
    "Object.fromEntries(iterable)": {
        "body": [
            ".fromEntries($1)"
        ],
        "description": "The Object.fromEntries() method transforms a list of key-value pairs into an object.",
        "prefix": ".fre"
    },
    "Object.fromEntries(iterable) ": {
        "body": [
            "Object.fromEntries($1)"
        ],
        "description": "The Object.fromEntries() method transforms a list of key-value pairs into an object.",
        "prefix": "objfre"
    },
    "Object.is": {
        "body": [
            ".is($1, )"
        ],
        "description": "The Object.is() method determines whether two values are the same value.",
        "prefix": ".isv"
    },
    "Object.is(value1, value2)": {
        "body": [
            "Object.is($1, )"
        ],
        "description": "The Object.is() method determines whether two values are the same value.",
        "prefix": "objisv"
    },
    "Object.isExtensible": {
        "body": [
            ".isExtensible($1)"
        ],
        "description": "The Object.isExtensible() method determines if an object is extensible.",
        "prefix": ".ise"
    },
    "Object.isExtensible(obj)": {
        "body": [
            "Object.isExtensible($1)"
        ],
        "description": "The Object.isExtensible() method determines if an object is extensible.",
        "prefix": "objise"
    },
    "Object.isFrozen": {
        "body": [
            ".isFrozen($1)"
        ],
        "description": "The Object.isFrozen() determines if an object is frozen.",
        "prefix": ".isf"
    },
    "Object.isFrozen(obj)": {
        "body": [
            "Object.isFrozen($1)"
        ],
        "description": "The Object.isFrozen() determines if an object is frozen.",
        "prefix": "objisf"
    },
    "Object.isSealed": {
        "body": [
            ".isSealed($1)"
        ],
        "description": "The Object.isSealed() determines if an object is sealed.",
        "prefix": ".iss"
    },
    "Object.isSealed(obj)": {
        "body": [
            "Object.isSealed($1)"
        ],
        "description": "The Object.isSealed() determines if an object is sealed.",
        "prefix": "objiss"
    }
}