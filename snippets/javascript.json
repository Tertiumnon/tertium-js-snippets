{
    "console.dir": {
        "prefix": "cd",
        "body": [
            "console.dir($1);"
        ],
        "description": "\"console.dir()\""
    },
    "console.error": {
        "prefix": "ce",
        "body": [
            "console.error($1);"
        ],
        "description": "\"console.error()\""
    },
    "console.info": {
        "prefix": "ci",
        "body": [
            "console.info($1);"
        ],
        "description": "\"console.info()\""
    },
    "console.log": {
        "prefix": "cl",
        "body": [
            "console.log($1);"
        ],
        "description": "\"console.log()\""
    },
    "console.warn": {
        "prefix": "cw",
        "body": [
            "console.warn($1);"
        ],
        "description": "\"console.warn()\""
    },
    "debugger": {
        "prefix": "de",
        "body": [
            "debugger;$1"
        ],
        "description": "\"debugger\""
    },
    "document": {
        "prefix": "doc",
        "body": [
            "document"
        ],
        "description": "\"document\""
    },
    "addEventListener blur": {
        "prefix": "aelb",
        "body": [
            "addEventListener('blur', e => $1);"
        ],
        "description": "\".addEventListener('blur', e => fn)\""
    },
    "addEventListener click": {
        "prefix": "aelc",
        "body": [
            "addEventListener('click', e => $1);"
        ],
        "description": "\".addEventListener('click', e => fn)\""
    },
    "addEventListener change": {
        "prefix": "aelch",
        "body": [
            "addEventListener('change', e => $1);"
        ],
        "description": "\".addEventListener('change', e => fn)\""
    },
    "addEventListener focus": {
        "prefix": "aelf",
        "body": [
            "addEventListener('focus', e => $1);"
        ],
        "description": "\".addEventListener('focus', e => fn)\""
    },
    "addEventListener focusout": {
        "prefix": "aelfo",
        "body": [
            "addEventListener('focusout', e => $1);"
        ],
        "description": "\".addEventListener('focusout', e => fn)\""
    },
    "addEventListener keydown": {
        "prefix": "aelkd",
        "body": [
            "addEventListener('keydown', e => $1);"
        ],
        "description": "\".addEventListener('keydown', e => fn)\""
    },
    "addEventListener mouseover": {
        "prefix": "aelmov",
        "body": [
            "addEventListener('mouseover', e => $1);"
        ],
        "description": "\".addEventListener('mouseover', e => fn)\""
    },
    "addEventListener mouseout": {
        "prefix": "aelmo",
        "body": [
            "addEventListener('mouseout', e => $1);"
        ],
        "description": "\".addEventListener('mouseout', e => fn)\""
    },
    "appendChild": {
        "prefix": "ac",
        "body": [
            "appendChild($1);"
        ],
        "description": "\".appendChild(<el: Node>)\""
    },
    "removeChild": {
        "prefix": "rc",
        "body": [
            "removeChild($1);"
        ],
        "description": "\".removeChild(<el: Node>)\""
    },
    "createElement": {
        "prefix": "cel",
        "body": [
            "createElement('$1');"
        ],
        "description": "\".createElement('<tag: String>')\""
    },
    "classList.add": {
        "prefix": "cla",
        "body": [
            "classList.add('$1');"
        ],
        "description": "\".classList.add('<class: String>')\""
    },
    "classList.contains": {
        "prefix": "cla",
        "body": [
            "classList.contains('$1');"
        ],
        "description": "\".classList.contains('<class: String>')\""
    },
    "classList.toggle": {
        "prefix": "clt",
        "body": [
            "classList.toggle('$1');"
        ],
        "description": "\"classList.toggle('<class: String>')\""
    },
    "classList.remove": {
        "prefix": "clr",
        "body": [
            "classList.remove('$1');"
        ],
        "description": "\".classList.remove('<class: String>')\""
    },
    "getElementById": {
        "prefix": "gebi",
        "body": [
            "getElementById('$1');"
        ],
        "description": "\".getElementById('<id: String>')\""
    },
    "getElementsByClassName": {
        "prefix": "gebc",
        "body": [
            "getElementsByClassName('$1');"
        ],
        "description": "\".getElementsByClassName('<class: String>')\""
    },
    "getElementsByTagName": {
        "prefix": "gebt",
        "body": [
            "getElementsByTagName('$1');"
        ],
        "description": "\".getElementsByTagName('<tag: String>')\""
    },
    "getAttribute": {
        "prefix": "ga",
        "body": [
            "getAttribute('$1');"
        ],
        "description": "\".getAttribute('<attr: String>')\""
    },
    "setAttribute": {
        "prefix": "sa",
        "body": [
            "setAttribute('$1', '');"
        ],
        "description": "\".setAttribute('<attr: String>', '<val: String>')\""
    },
    "removeAttribute": {
        "prefix": "ra",
        "body": [
            "removeAttribute('$1');"
        ],
        "description": "\"removeAttribute('<attr: String>')\""
    },
    "innerHTML": {
        "prefix": "ih",
        "body": [
            "innerHTML = '$1';"
        ],
        "description": "\".innerHTML = 'html'\""
    },
    "textContent": {
        "prefix": "tc",
        "body": [
            "textContent = '$1';"
        ],
        "description": "\".textContent = 'text'\""
    },
    "querySelector": {
        "prefix": "qs",
        "body": [
            "querySelector('$1');"
        ],
        "description": "\".querySelector('sel')\""
    },
    "querySelectorAll": {
        "prefix": "qsa",
        "body": [
            "querySelectorAll('$1');"
        ],
        "description": "\".querySelectorAll('sel')\""
    },
    "for": {
        "prefix": "for",
        "body": [
            "for (let i = 0; i < $1.length; i += 1) {",
            "\tconst item = $1[i];",
            "}"
        ],
        "description": "\"for\""
    },
    "for of": {
        "prefix": "forof",
        "body": [
            "for (const el of $1) {",
            "\t",
            "}"
        ],
        "description": "\"for (const el of <arr: []>) {}\""
    },
    "for in": {
        "prefix": "forin",
        "body": [
            "for (const el in $1) {",
            "\t",
            "}"
        ],
        "description": "\"for (const el of <<obj: Object>>) {}\""
    },
    "while": {
        "prefix": "while",
        "body": [
            "while ($1) {",
            "\t",
            "}"
        ],
        "description": "\"while (<cond>) {}\""
    },
    "do while": {
        "prefix": "dowhile",
        "body": [
            "do {",
            "\t$1",
            "} while ();"
        ],
        "description": "\"do {} while (<cond>) {}\""
    },
    "forEach": {
        "prefix": "fe",
        "body": [
            "forEach(item => $1);"
        ],
        "description": "\".forEach(item => <fn>)\""
    },
    "function": {
        "prefix": "fn",
        "body": [
            "function $1() {",
            "\t",
            "}"
        ],
        "description": "function <fnName>() {}"
    },
    "anonymous function": {
        "prefix": "afn",
        "body": [
            "function() {",
            "\t$1",
            "}"
        ],
        "description": "anonymous function"
    },
    "arrow function": {
        "prefix": "arfn",
        "body": [
            "() => {$1}"
        ],
        "description": "arrow function"
    },
    "prototype": {
        "prefix": "proto",
        "body": [
            "prototype.$1 = "
        ],
        "description": ".prototype.fnName = fn"
    },
    "immediately-invoked function expression": {
        "prefix": "iife",
        "body": [
            "($1)();"
        ],
        "description": "(afn)(args)"
    },
    "function apply": {
        "prefix": "apply",
        "body": [
            "apply($1);"
        ],
        "description": ".apply(<thisArg: Object>, <args: Array>)"
    },
    "function bind": {
        "prefix": "bind",
        "body": [
            "bind($1);"
        ],
        "description": ".bind(<thisArg: Object>, arg1, argN)"
    },
    "function call": {
        "prefix": "call",
        "body": [
            "call($1);"
        ],
        "description": ".apply(<thisArg: Object>, arg1, argN)"
    },
    "JSON.parse": {
        "prefix": "jsonp",
        "body": [
            "JSON.parse($1);"
        ],
        "description": "JSON.parse(str: String)"
    },
    "JSON.stringify": {
        "prefix": "jsons",
        "body": [
            "JSON.stringify($1);"
        ],
        "description": "JSON.stringify(<obj: Object>)"
    },
    "setInterval": {
        "prefix": "si",
        "body": [
            "setInterval($1, 3000);"
        ],
        "description": "setInterval(afn, 3000)"
    },
    "setTimeout": {
        "prefix": "st",
        "body": [
            "setTimeout($1, 3000);"
        ],
        "description": "setTimeout(afn, 3000)"
    },
    "use strict": {
        "prefix": "us",
        "body": [
            "'use strict';"
        ],
        "description": "'use strict'"
    },
    "alert": {
        "prefix": "al",
        "body": [
            "alert('$1');"
        ],
        "description": "alert('<text: String>')"
    },
    "confirm": {
        "prefix": "co",
        "body": [
            "confirm('$1');"
        ],
        "description": "confirm('<text: String>')"
    },
    "prompt": {
        "prefix": "pr",
        "body": [
            "prompt('$1');"
        ],
        "description": "prompt('<text: String>')"
    }
}